/*
 Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements.  See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership.  The ASF licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License.  You may obtain a copy of the License at
 
 http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied.  See the License for the
 specific language governing permissions and limitations
 under the License.
 */

//
//  MainViewController.h
//  NRSM
//
//  Created by ___FULLUSERNAME___ on ___DATE___.
//  Copyright ___ORGANIZATIONNAME___ ___YEAR___. All rights reserved.
//

#import "MainViewController.h"
#import "iToast.h"

@implementation MainViewController
@synthesize mySwipe;

UIButton *button;

- (id)initWithNibName:(NSString*)nibNameOrNil bundle:(NSBundle*)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Uncomment to override the CDVCommandDelegateImpl used
        // _commandDelegate = [[MainCommandDelegate alloc] initWithViewController:self];
        // Uncomment to override the CDVCommandQueue used
        // _commandQueue = [[MainCommandQueue alloc] initWithViewController:self];
    }
    return self;
}

- (id)init
{
    self = [super init];
    if (self) {
        // Uncomment to override the CDVCommandDelegateImpl used
        // _commandDelegate = [[MainCommandDelegate alloc] initWithViewController:self];
        // Uncomment to override the CDVCommandQueue used
        // _commandQueue = [[MainCommandQueue alloc] initWithViewController:self];
    }
    return self;
}

- (void)didReceiveMemoryWarning
{
    // Releases the view if it doesn't have a superview.
    [super didReceiveMemoryWarning];
    
    // Release any cached data, images, etc that aren't in use.
}

#pragma mark View lifecycle

- (void)viewWillAppear:(BOOL)animated
{
    // View defaults to full size.  If you want to customize the view's size, or its subviews (e.g. webView),
    // you can do so here.
    
    [super viewWillAppear:animated];
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    // Do any additional setup after loading the view from its nib.
    
    // Establish SwipeIn
    if (!self.mySwipe) {
        
        self.mySwipe = [[Swipe alloc] init];
        
        //        switchWatch.on = NO;
        
        if (self.mySwipe)
        {
            //[self.mySwipe setGain:0.9f];
            [self.mySwipe setNotificationDelegate: self];
            
            //            [lblSelectDevice setText:[NSString stringWithFormat:@"Select Device\n(%@)", @"SWIPE_CHIP"]];
            
            //[self.mySwipe setSwipeType:SWIPE_MSR];
            //            [self.mySwipe setSwipeType:SWIPE_BARCODE];
            [self.mySwipe setSwipeType:SWIPE_CHIP];
            //            [self.mySwipe setValidCheck:true];
            
            
            printf("\r\nSwipe Initialized ");
            [self.mySwipe startWatching];
            
            if ( ![self.mySwipe getState] )
            {
                //labelStatus.text = [NSString stringWithFormat:@"Swipe Unplugged"];
                [self removeBarcodeButton];
                
            }
            else
            {
                //labelStatus.text = [NSString stringWithFormat:@"Swipe Plugged"];
                [self setBarcodeButton];
                
            }
            
        }
        else
        {
            NSLog(@"Error: Could not create Swiper");
            
        }
    }
}

- (void)viewDidUnload
{
    [super viewDidUnload];
    // Release any retained subviews of the main view.
    // e.g. self.myOutlet = nil;
}

- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation
{
    // Return YES for supported orientations
    return [super shouldAutorotateToInterfaceOrientation:interfaceOrientation];
}

/* Comment out the block below to over-ride */

/*
 - (UIWebView*) newCordovaViewWithFrame:(CGRect)bounds
 {
 return[super newCordovaViewWithFrame:bounds];
 }
 */

#pragma mark UIWebDelegate implementation

- (void)webViewDidFinishLoad:(UIWebView*)theWebView
{
    // Black base color for background matches the native apps
    theWebView.backgroundColor = [UIColor blackColor];
    
    return [super webViewDidFinishLoad:theWebView];
}

#pragma mark Swipe

- (void) setBarcodeButton
{
    /*
     동작원리
     1) 버튼이 최종움직인 위치를 NSUserDefaults에서 가자와 버튼의 위치를 지정해줍니다.
     2) 최초인경우 적당한 위치에 버튼을 위치시킵니다.
     3) 버튼을 생성하며 UIControlEventTouchDragInside(버튼을 누르고 이동한 상태입니다), UIControlEventTouchDragOutside(버튼을 누르고 이동한 후 손을 뗀상태) 이벤트를 연결해줍니다.
     */
    
    
    // 화면의 해상도를 가져옵니다.
    CGRect screen = [[UIScreen mainScreen] applicationFrame];
    // 이전 위치값을 가져옵니다.
    NSUserDefaults *barcodeBtnPrefs = [NSUserDefaults standardUserDefaults];
    NSString *barcodeBtnX = [barcodeBtnPrefs objectForKey:@"barcodeBtnX"];
    NSString *barcodeBtnY = [barcodeBtnPrefs objectForKey:@"barcodeBtnY"];
    
    
    if (nil == barcodeBtnX) {
        // 최초인경우
        barcodeBtnX = [NSString stringWithFormat:@"%d", 250];
    }
    else if (barcodeBtnX.intValue >= 320) {
        barcodeBtnX = [NSString stringWithFormat:@"%d", 250];
    }
    else if (barcodeBtnX.intValue <= 0) {
        barcodeBtnX = [NSString stringWithFormat:@"%d", 0];
    }
    if (nil == barcodeBtnY) {
        barcodeBtnY = [NSString stringWithFormat:@"%d", (int)(screen.size.height - 50) - 60];
    }
    else if (barcodeBtnY.intValue > screen.size.height - 50 - 60) {
        barcodeBtnY = [NSString stringWithFormat:@"%d", (int)(screen.size.height - 50) - 60];
    }
    else if (barcodeBtnY.intValue < 0) {
        barcodeBtnY = [NSString stringWithFormat:@"%d", 0];
    }
    // 버튼위치 조정한값 저장
    [barcodeBtnPrefs setObject:barcodeBtnX forKey:@"barcodeBtnX"];
    [barcodeBtnPrefs setObject:barcodeBtnY forKey:@"barcodeBtnY"];
    [barcodeBtnPrefs synchronize];
    
    //버튼생성
    button = [UIButton buttonWithType:UIButtonTypeCustom];
    [button setFrame:CGRectMake(barcodeBtnX.intValue, barcodeBtnY.intValue, 50, 50)];   // 버튼크기 지정
    [button addTarget:self action:@selector(imageMoved:withEvent:) forControlEvents:UIControlEventTouchDragInside];     // 이벤트 연결
    [button addTarget:self action:@selector(imageMoved:withEvent:) forControlEvents:UIControlEventTouchDragOutside];    // 이벤트 연결
    [button addTarget:self action:@selector(imageClicked:withEvent:) forControlEvents:UIControlEventTouchUpInside];
    [button setImage:[UIImage imageNamed:@"icon_barcode.png"] forState:UIControlStateNormal];
    [self.view addSubview:button];      // self.view에 Add
//    [self.mySwipe startWatching];
}

- (void) removeBarcodeButton
{
    [button removeFromSuperview];
//    [self.mySwipe stopWatching:true];
}

// 버튼을 Drag해서 이동할때 동작되는 이벤트
- (IBAction) imageMoved:(id) sender withEvent:(UIEvent *) event
{
    UIControl *control = sender;
    
    UITouch *t = [[event allTouches] anyObject];
    CGPoint pPrev = [t previousLocationInView:control];
    CGPoint p = [t locationInView:control];
    
    // 센터지정
    CGPoint center = control.center;
    center.x += p.x - pPrev.x;
    center.y += p.y - pPrev.y;
    control.center = center;
    
    NSUserDefaults *barcodeBtnPrefs = [NSUserDefaults standardUserDefaults];
    [barcodeBtnPrefs setObject:[NSString stringWithFormat:@"%d", (int)(center.x - 25)] forKey:@"barcodeBtnX"];
    [barcodeBtnPrefs setObject:[NSString stringWithFormat:@"%d", (int)(center.y - 25)] forKey:@"barcodeBtnY"];
    [barcodeBtnPrefs synchronize];
}

- (IBAction) imageClicked:(id) sender withEvent:(UIEvent *) event
{
//    if(![self.mySwipe getResult])
//        [[[iToast makeText:@"바코드 리더기 전원을 켜주십시오."] setGravity:iToastGravityBottom] show];
//    else
        [self.mySwipe startScan];
}

// this method gets called (by property listener callback functions) when a watching or playback
// audio queue object starts or stops.
- (void) updateSwipeStateChange
{
    char msrTrack[128];
    CHIP_RESULT chipResult;
    EMV_INFO    emvInfo;
    int swipCount;
    char FwVer[32];
    char LibVer[32];
    int msrLength;
    
    NSString *script;
    
    UIDevice *myDevice = [UIDevice currentDevice];
    [myDevice setBatteryMonitoringEnabled:YES];
    
    //AudioServicesPlaySystemSound(1108);
    
    //    printf("\nSwipe Event 0x%x", [self.mySwipe getEvent]);
    
    
    switch ( [self.mySwipe getEvent] ) {
        case SEVENT_UNPLUG :
            [[[iToast makeText:@"Swipe Unplugged"] setGravity:iToastGravityBottom] show];
            //            labelStatus.text = [NSString stringWithFormat:@"Swipe Unplugged"];
            printf("\r\nSwipeApp:UnPlugged !!!");
            [self removeBarcodeButton];
            break;
        case SEVENT_PLUG :
            [[[iToast makeText:@"Swipe Plugged"] setGravity:iToastGravityBottom] show];
            //            labelStatus.text = [NSString stringWithFormat:@"Swipe Plugged"];
            printf("\r\nSwiepeApp:Plugged !!!");
            [self setBarcodeButton];
            break;
        case SEVENT_MSR :
        case SEVENT_EMV_MSR :
            
            swipCount = [self.mySwipe getCount];
            
            [self.mySwipe getFwVer:FwVer];
            [self.mySwipe getLibVer:LibVer];
            
            //            labelMsr.text = [NSString stringWithFormat:@"Track II : "];
            
            switch ( [self.mySwipe getResult] ) {
                case SRESULT_ERROR_FRAME :
                    //                    labelResult.text = [NSString stringWithFormat:@"Frame Error"];
                    break;
                case SRESULT_ERROR_PARITY :
                    //                    labelResult.text = [NSString stringWithFormat:@"Parity Error"];
                    break;
                case SRESULT_EMPTY :
                    //                    labelResult.text = [NSString stringWithFormat:@"Empty MSR"];
                    break;
                case SRESULT_ERROR_FORMAT :
                    //                    labelResult.text = [NSString stringWithFormat:@"MSR Error"];
                    break;
                case SRESULT_ERROR_CARDNO :
                    //                    labelResult.text = [NSString stringWithFormat:@"Invalid Card No"];
                    msrLength = [self.mySwipe getTrack:msrTrack];
                    //                    labelMsr.text = [NSString stringWithFormat:@"MSR : %s",msrTrack];
                    printf("\r\nSwipeApp:%s %s MSR[%d]%s",FwVer, LibVer,msrLength, msrTrack);
                    //                    labelMsr.text = [NSString stringWithFormat:@"Track II[%d]:%s",msrLength,msrTrack];
                    break;
                case SRESULT_OK :
                    //                    labelResult.text = [NSString stringWithFormat:@"Complete"];
                    msrLength = [self.mySwipe getTrack:msrTrack];
                    //                    labelMsr.text = [NSString stringWithFormat:@"MSR : %s",msrTrack];
                    printf("\r\nSwipeApp:%s %s MSR[%d]%s",FwVer, LibVer,msrLength, msrTrack);
                    //                    labelMsr.text = [NSString stringWithFormat:@"Track II[%d]:%s",msrLength,msrTrack];
                    break;
                case SRESULT_POWER_ON :
                    //                    labelResult.text = [NSString stringWithFormat:@"Power On"];
                    
                    [[[iToast makeText:@"Swipe Power On"] setGravity:iToastGravityBottom] show];
                    break;
                case SRESULT_POWER_OFF :
                    [[[iToast makeText:@"Swipe Power Off"] setGravity:iToastGravityBottom] show];
                    //                    labelResult.text = [NSString stringWithFormat:@"Power Off"];
                    break;
                case SRESULT_ERROR_LRC :
                    //                    labelResult.text = [NSString stringWithFormat:@"LRC Error"];
                    msrLength = [self.mySwipe getTrack:msrTrack];
                    //                    labelMsr.text = [NSString stringWithFormat:@"MSR : %s",msrTrack];
                    printf("\r\nSwipeApp:%s %s MSR[%d]%s",FwVer, LibVer,msrLength, msrTrack);
                    //                    labelMsr.text = [NSString stringWithFormat:@"Track II[%d]:%s",msrLength,msrTrack];
                    break;
                    
            }
            
            
            //            labelSwVer.text = [NSString stringWithFormat:@"Lib Ver : %s",LibVer];
            //            labelFwVer.text = [NSString stringWithFormat:@"Fw Ver : %s",FwVer];
            //            labelHwVer.text = [NSString stringWithFormat:@"Count : %d",[self.mySwipe getCount]];
            //            labelBatt.text = [NSString stringWithFormat:@"SM200 Batt Volt[%dV] Life[%d%%]",
            //                              [self.mySwipe getBatteryVolt],
            //                              [self.mySwipe getBatteryLife]];
            //
            //            labelSerial.text = [NSString stringWithFormat:@"SN : %s", [self.mySwipe getSerialString]];
            break;
            
            // for barcode
        case SEVENT_BARCODE :
            //            labelMsr.text = [NSString stringWithFormat:@"BarCode : "];
            swipCount = [self.mySwipe getCount];
            [self.mySwipe getFwVer:FwVer];
            [self.mySwipe getLibVer:LibVer];
            switch ( [self.mySwipe getResult] ) {
                case SRESULT_ERROR_FRAME :
                    //                    labelResult.text = [NSString stringWithFormat:@"Frame Error"];
                    break;
                case SRESULT_EMPTY :
                    //                    labelResult.text = [NSString stringWithFormat:@"Empty BarCode"];
                    break;
                case SRESULT_OK :
                    //[mySwipe scanBeep];
                    //[self.mySwipe stopWatching];
                    //AudioServicesPlaySystemSound(1108);
                    //[self.mySwipe startWatching];
                    //                    labelResult.text = [NSString stringWithFormat:@"Complete"];
                    msrLength = [self.mySwipe getBarCode:msrTrack];
                    //                    labelMsr.text = [NSString stringWithFormat:@"BarCode:[%d]%s",msrLength,	msrTrack];
                    printf("\r\nSwipeApp: BarCode[%d]%s",msrLength, msrTrack);
                    
                    script = [NSString stringWithFormat:@"getBarcodebySwipe('%s')", msrTrack];
                    NSLog(@"%@", script);
                    [ (UIWebView *) self.webView stringByEvaluatingJavaScriptFromString:[NSString stringWithFormat:@"setTimeout(function() {%@}, 1);", script]];
                    break;
                case SRESULT_SCAN_FAIL :
                    
                    [[[iToast makeText:@"Swipe Scan Fail"] setGravity:iToastGravityBottom] show];
                    //                    labelResult.text = [NSString stringWithFormat:@"Scan Fail"];
                    break;
                case SRESULT_POWER_ON :
                    [[[iToast makeText:@"Swipe Power On"] setGravity:iToastGravityBottom] show];
                    //                    labelResult.text = [NSString stringWithFormat:@"Power On"];
                    [self.mySwipe startWatching];
                    break;
                case SRESULT_POWER_OFF :
                    [[[iToast makeText:@"Swipe Power Off"] setGravity:iToastGravityBottom] show];
                    //                    labelResult.text = [NSString stringWithFormat:@"Power Off"];
                    break;
                    
            }
            //            labelSwVer.text = [NSString stringWithFormat:@"Lib Ver : %s",LibVer];
            //            labelFwVer.text = [NSString stringWithFormat:@"Fw Ver : %s",FwVer];
            //            labelHwVer.text = [NSString stringWithFormat:@"Count : %d",[self.mySwipe getCount]];
            //            labelBatt.text = [NSString stringWithFormat:@"SM200 Batt Volt[%dV] Life[%d%%]",
            //                              [self.mySwipe getBatteryVolt],
            //                              [self.mySwipe getBatteryLife]];
            //
            //            labelSerial.text = [NSString stringWithFormat:@"SN : %s", [self.mySwipe getSerialString]];
            
            
            break;
            
            
            // for EMV Control
        case SEVENT_EMV_CONTROL :
            //            labelMsr.text = [NSString stringWithFormat:@""];
            swipCount = [self.mySwipe getCount];
            [self.mySwipe getFwVer:FwVer];
            [self.mySwipe getLibVer:LibVer];
            switch ( [self.mySwipe getResult] ) {
                case   EMV_POWER_ON :
                    //                    labelResult.text = [NSString stringWithFormat:@"Power On"];
                    break;
                case   EMV_POWER_OFF :
                    //                    labelResult.text = [NSString stringWithFormat:@"Power Off"];
                    break;
                case   EMV_CARD_INSERT :
                    break;
                case   EMV_CARD_EJECT :
                    //                    labelResult.text  = [NSString stringWithFormat:@"Eject"];
                    break;
                case  EMV_IFM_ERROR :
                    //                    labelResult.text  = [NSString stringWithFormat:@"IC Card Error 0x%x !",[self.mySwipe getIfmErrorCode]];
                    break;
                    
                    
            }
            //            labelSwVer.text = [NSString stringWithFormat:@"Lib Ver : %s",LibVer];
            //            labelFwVer.text = [NSString stringWithFormat:@"Fw Ver : %s",FwVer];
            //            labelHwVer.text = [NSString stringWithFormat:@"Count : %d",[self.mySwipe getCount]];
            //            labelBatt.text = [NSString stringWithFormat:@"SM200 Batt Volt[%dV] Life[%d%%]",
            //                              [self.mySwipe getBatteryVolt],
            //                              [self.mySwipe getBatteryLife]];
            //
            //            labelSerial.text = [NSString stringWithFormat:@"SN : %s", [self.mySwipe getSerialString]];
            
            
            break;
            
            // for EMV Data
        case SEVENT_EMV_DATA :
            //            labelMsr.text = [NSString stringWithFormat:@"EmvC : "];
            swipCount = [self.mySwipe getCount];
            [self.mySwipe getFwVer:FwVer];
            [self.mySwipe getLibVer:LibVer];
            [self.mySwipe getChipResult:&chipResult];
            [self.mySwipe getEmvInfo:&emvInfo];
            
            switch ( [self.mySwipe getResult] ) {
                case   EMV_ICCARD_DATA :
                    //                    labelResult.text = [NSString stringWithFormat:@"EMV Data"];
                    break;
            }
            
            //            labelResult.text = [NSString stringWithFormat:@"Complete:%s/%s",emvInfo.applName,emvInfo.holderName];
            printf("\r\nEmvD:%s %s MSR[%d]%s",FwVer, LibVer,msrLength, msrTrack);
            //            labelMsr.text = [NSString stringWithFormat:@"EMV[%d]:%s ",msrLength,msrTrack];
            //
            //            labelSwVer.text = [NSString stringWithFormat:@"Lib Ver : %s",LibVer];
            //            labelFwVer.text = [NSString stringWithFormat:@"Fw Ver : %s",FwVer];
            //            labelHwVer.text = [NSString stringWithFormat:@"Count : %d",[self.mySwipe getCount]];
            //            labelBatt.text = [NSString stringWithFormat:@"SM200 Batt Volt[%dV] Life[%d%%]",
            //                              [self.mySwipe getBatteryVolt],
            //                              [self.mySwipe getBatteryLife]];
            //
            //            labelSerial.text = [NSString stringWithFormat:@"SN : %s", [self.mySwipe getSerialString]];
            
            break;
            
        case SEVENT_SWIPE_INFO :
            //            labelMsr.text = [NSString stringWithFormat:@"SInfo : "];
            swipCount = [self.mySwipe getCount];
            [self.mySwipe getFwVer:FwVer];
            [self.mySwipe getLibVer:LibVer];
            switch ( [self.mySwipe getResult] ) {
                case SRESULT_POWER_ON :
                    //                    labelResult.text = [NSString stringWithFormat:@"Power On"];
                    break;
                case SRESULT_POWER_OFF :
                    //                    labelResult.text = [NSString stringWithFormat:@"Power Off"];
                    break;
                    
            }
            //            labelSwVer.text = [NSString stringWithFormat:@"Lib Ver : %s",LibVer];
            //            labelFwVer.text = [NSString stringWithFormat:@"Fw Ver : %s",FwVer];
            //            labelHwVer.text = [NSString stringWithFormat:@"Count : %d",[self.mySwipe getCount]];
            //            labelBatt.text = [NSString stringWithFormat:@"SM200 Batt Volt[%dV] Life[%d%%]",
            //                              [self.mySwipe getBatteryVolt],
            //                              [self.mySwipe getBatteryLife]];
            //
            //            labelSerial.text = [NSString stringWithFormat:@"SN : %s", [self.mySwipe getSerialString]];
            
            break;
            
            
            
    }
    
}


/* Comment out the block below to over-ride */

/*
 
 - (void) webViewDidStartLoad:(UIWebView*)theWebView
 {
 return [super webViewDidStartLoad:theWebView];
 }
 
 - (void) webView:(UIWebView*)theWebView didFailLoadWithError:(NSError*)error
 {
 return [super webView:theWebView didFailLoadWithError:error];
 }
 
 - (BOOL) webView:(UIWebView*)theWebView shouldStartLoadWithRequest:(NSURLRequest*)request navigationType:(UIWebViewNavigationType)navigationType
 {
 return [super webView:theWebView shouldStartLoadWithRequest:request navigationType:navigationType];
 }
 */

@end

@implementation MainCommandDelegate

/* To override the methods, uncomment the line in the init function(s)
 in MainViewController.m
 */

#pragma mark CDVCommandDelegate implementation

- (id)getCommandInstance:(NSString*)className
{
    return [super getCommandInstance:className];
}

- (NSString*)pathForResource:(NSString*)resourcepath
{
    return [super pathForResource:resourcepath];
}

@end

@implementation MainCommandQueue

/* To override, uncomment the line in the init function(s)
 in MainViewController.m
 */
- (BOOL)execute:(CDVInvokedUrlCommand*)command
{
    return [super execute:command];
}



@end
