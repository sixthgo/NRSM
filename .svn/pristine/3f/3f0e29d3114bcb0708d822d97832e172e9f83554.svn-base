/**
 * Created by june on 15. 6. 11..
 */
cortrollerModule.controller('AppCtrl', ['$scope', '$ionicModal', '$timeout', 'CordovaService', '$state', '$translate', function ($scope, $ionicModal, $timeout, CordovaService, $state, $translate) {

    CordovaService.ready.then(function () {
        // Using MDMPlugin for MDM Check
    });
    
    // for child controller 
    $scope.base = {};
    $scope.base.menuId = '';
    $scope.base.viewId = '';
    ////$scope.base.stateId = '';
    $scope.base.snapshot = null;
    $scope.base.currentStateParams = null;

    $scope.word = {};

    // global setting
    $scope.setting = {};
    $scope.setting.header = {};
    $scope.setting.footer = {};
    $scope.setting.header.prevClass = '';
    $scope.setting.homeMenuId = 'NRSMM00';

    $scope.debug = {};
    $scope.debug.logging = true;

    $scope.debug.Log = function (val) {
        if ($scope.debug.logging == true)
            console.log(val);
    }

    $scope.Init = function (translate) {
        $scope.debug.Log('AppCtrl.Init();');

        var headerFooterClass = 'bar-energized';
        $scope.setting.header.class = headerFooterClass;
        $scope.setting.footer.class = headerFooterClass;

        // set multi language
        translate.use('ko').then(function () {
            $scope.GetWord(translate);
        });
    }
    
    $scope.GetWord = function (translate) {

        var result = [];
        var firstArray = $.map(words, function (val, idx) { return [val]; });
        var temp = null;
        temp = $.map(firstArray[0], function (val, idx) { return [idx]; });
        result = $.merge( result, temp)

        //
        $scope.wordParam = { name: 'tester' };

        translate(result).then(function (words) {
            $scope.word.common = words.common;
            $scope.word.manager = words.manager;
            $scope.word.title = words.title;
            $scope.word.task = words.task;
            $scope.word.hyper = words.hyper;
            $scope.word.productInfo = words.productInfo;
        });

        translate('testSentence', { name: 'tester' }).then(function (word) {
            $scope.word.testSentence = word;
        });
    }

    $scope.Init($translate);

    // called sub system main controller
    $scope.base.HasAuthentication = function () {

        // [ing]
        // call service 
        // return result 
        return true;
    }

    $scope.base.SetMenu = function (menuId) {
        
        $scope.base.menuId = menuId;

        var headerClass = $scope.setting.header.class;
        var footerClass = $scope.setting.footer.class;

        $scope.setting.header.prevClass = headerClass;////

        if (menuId == 'NRSMM00') {
            headerClass = 'bar-positive';
            footerClass = 'bar-positive';
        }
        else if (menuId == 'NRSMM01') {
            headerClass = 'bar-calm';
            footerClass = 'bar-calm';
        }
        else if (menuId == 'NRSMM02') {
            headerClass = 'bar-balanced';
            footerClass = 'bar-balanced';
        }
        else if (menuId == 'NRSMM03') {
            headerClass = 'bar-energized';
            footerClass = 'bar-energized';
        }
        else if (menuId == 'NRSMM04') {
            headerClass = 'bar-assertive';
            footerClass = 'bar-assertive';
        }
        else if (menuId == 'NRSMM05') {
            headerClass = 'bar-royal';
            footerClass = 'bar-royal';
        }
        else if (menuId == 'NRSMM07') {
            headerClass = 'bar-eland-balanced';
            footerClass = 'bar-eland-balanced';
        }

        $scope.setting.header.class = headerClass;
        $scope.setting.footer.class = footerClass;

        UpdateHeaderClass();
    }

    function UpdateHeaderClass() {
        var headerElements = document.getElementsByTagName('ion-header-bar');

        var headerOldClass = $scope.setting.header.prevClass;
        var headerNewClass = $scope.setting.header.class;

        for (var i = 0; i < headerElements.length; i++) {
            var el = angular.element(headerElements[i]);
            if (el.hasClass(headerOldClass)) {
                el.removeClass(headerOldClass);
                el.addClass(headerNewClass);
            }
        }

        $scope.setting.header.prevClass = headerNewClass;
    }

    $scope.base.SetView = function (viewId) {

        $scope.base.viewId = viewId;
        
        if (viewId == 'NRSM001') {
            $scope.debug.Log('AppCtrl.base.SetView()');
        }            
    }

    $scope.base.SaveSnapshot = function () {
        
    }

    $scope.base.Reload = function () {
        $scope.debug.Log('AppCtrl.base.Reload()');
        ////debugger
        $state.transitionTo($state.current, $scope.base.currentStateParams, {
            reload: true, inherite: false, notify: true
        });
    }
    
    $scope.base.ClickStar = function () {
        $scope.debug.Log('AppCtrl.ClickStar()');
    }

    $scope.base.ClickGear = function () {
        $scope.debug.Log('AppCtrl.ClickGear()');
    }

    $scope.base.ClickAdd = function () {
        $scope.debug.Log('AppCtrl.ClickAdd()');
    }
}])

.directive('footer', function() {
    return {
        restrict: 'E',
        replace: true,
        templateUrl : 'templates/footer.html'   //update by liu.wenbin
    }
})

//.directive('header', function () {
//    return {
//        restrict: 'E',
//        replace: true,
//        templateUrl: '/templates/header.html'
//    }
//})

//.directive('header', function () {
//    return {
//        restrict: 'E',
//        replace: true,
//        templateUrl: '/templates/header.html',
//        //link: function (scope, element, attrs) {
//        //    //temp = scope.setting.header.class;
//        //    element.addClass(scope.setting.header.class);
//        //}
//        scope: {
//            temp: '=csstype'
//        }
//    }
//})