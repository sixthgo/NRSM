controllerModule.controller('NowSalesStockInwerksCtrl', function ($scope, $state, $stateParams, $q, $ionicLoading, $ionicPopup, $timeout, $cordovaDatePicker,
    PopupService, UtilService, AccumulateSalesService) {

    $scope.base.categoryId = 'sales';
    $scope.base.SetCategory($scope.base.categoryId);

    $scope.base.menuId = 'NRSM005'; // updated
    $scope.base.SetMenu($scope.base.menuId);

    $scope.favorite.support = true; // support favorite feature in this view
    $scope.favoriteKeyA = "KeyA";
    $scope.favoriteKeyB = "KeyB";
    $scope.favoriteKeyC = "KeyC";

    $scope.search = {};
    $scope.search.subType = 1;
    $scope.search.type = '-1-1-1';

    //
    $scope.storePopup = {};
    $scope.storePopup.selectedStore = { plantCode: '-1', plantName: '전지점' };
    $scope.storePopup.selectedStoreTemp = null;

    $scope.cuPopup = {};
    $scope.cuPopup.selectedCu = { cuCode: '-1', cuName: '모든CU' };
    $scope.cuPopup.selectedCuTemp = null;
    $scope.cuPopup.selectedPc = { pcCode: '-1', pcName: '모든PC' };
    $scope.cuPopup.selectedPcTemp = null;

    $scope.headerDate = '';

    $scope.data = {};
    $scope.result = {};

    $scope.sort = {};
    $scope.sort.column = 'name';
    $scope.sort.isDescending = false;

    $scope.requireScrollHeight = true;

    $scope.style.showCalendarButton = 'inline';
    $scope.style.showReloadButton = 'inline';

    $scope.isReload = false;

    $scope.Init = function () {
        $scope.debug.Log('LoginId=' + $scope.user.loginId);
        $scope.debug.Log('NowSalesStockInwerksCtrl.Init();');

        // set local word
        $scope.SetLocalWord();

        var yesterday = new Date();
        yesterday.setDate(yesterday.getDate() - 1);

        $scope.headerDate = UtilService.FormatDayDate(yesterday);

        var defer = $q.defer();

        defer.promise
                .then($scope.base.GetUserMenu)
                .then($scope.base.HasMenu)
                .then($scope.PostProcessing);

        defer.resolve();
    }

    $scope.PostProcessing = function (isAuthenticate) {

        //////if (isAuthenticate == false) {
        //////    PopupService.OpenPopupAlert('Warning', 'No have permission', $scope.GoHome);
        //////    return;
        //////}

        //
        $scope.InitData();

        $scope.base.swiper();
    }

    $scope.GoHome = function () {
        ////$ionicHistory.clearCache();
        $state.go('app.home');
    }

    $scope.SetLocalWord = function () {
        $scope.word.title = '현시각 매출 및 재고조회';
    }

    $scope.InitData = function () {
        if ($scope.favorite.support == true && $scope.favorite.selected != null)
            $scope.SetControlsByFavorite();

        ////else
        ////    $scope.GetData();
    }

    $scope.sorting = function (sortColumn) {
        $scope.sort.isDescending = ($scope.sort.column == sortColumn) ? !$scope.sort.isDescending : false;
        $scope.sort.column = sortColumn;
    }

    $scope.SetFavoriteA = function (favoriteA) {
        var defer = $q.defer();

        PlantService.query({
            loginId: $scope.user.loginId
        },
        function (data) {
            $scope.data.stores = data;
            for (var i = 0; i < $scope.data.stores.length; i++) {
                if (favoriteB == $scope.data.stores[i].plantCode) {
                    $scope.storePopup.selectedStoreTemp = $scope.data.stores[i];
                    $scope.storePopup.selectedStore = angular.copy($scope.storePopup.selectedStoreTemp);
                    break;
                }
            }
            defer.resolve(data);
        },
        function (error) {
            $scope.debug.Log(error);
            defer.reject(error);
        });

        return defer.promise;
    }

    $scope.SetFavoriteB = function (favoriteB) {

        var defer = $q.defer();

        CUService.query({
            loginId: $scope.user.loginId,
            type: 'cu',
            cuCode: ''
        },
        function (data) {
            $scope.data.cues = data;
            for (var i = 0; i < $scope.data.cues.length; i++) {
                if (favoriteC == $scope.data.cues[i].cuCode) {
                    $scope.cuPopup.selectedCuTemp = $scope.data.cues[i];
                    $scope.cuPopup.selectedCu = angular.copy($scope.cuPopup.selectedCuTemp);
                    break;
                }
            }
            defer.resolve(data);
        },
        function (error) {
            $scope.debug.Log(error);
            defer.reject(error);
        });

        return defer.promise;
    }

    $scope.SetControlsByFavorite = function () {

        // add code each view
        var favoriteA = $scope.base.GetFavoriteValue($scope.favoriteKeyA); //
        var favoriteB = $scope.base.GetFavoriteValue($scope.favoriteKeyB); //
        var favoriteC = $scope.base.GetFavoriteValue($scope.favoriteKeyC); //

        $q.all({
            A: $scope.SetFavoriteA(favoriteA).catch($scope.CatchException),
            B: $scope.SetFavoriteB(favoriteB).catch($scope.CatchException)
        })
        .then(
            function (results) {

                // favoriteC
                CUService.query({
                    loginId: '',
                    type: 'pc',
                    cuCode: $scope.cuPopup.selectedCu.cuCode
                }, function (data) {
                    $scope.data.pcs = data;

                    for (var i = 0; i < $scope.data.pcs.length; i++) {
                        if (favoriteC == $scope.data.pcs[i].pcCode) {
                            $scope.cuPopup.selectedPcTemp = $scope.data.pcs[i];
                            $scope.cuPopup.selectedPc = angular.copy($scope.cuPopup.selectedPcTemp);
                            break;
                        }
                    }

                    ////$scope.GetData();
                });
            },
            function (error) {
                $scope.debug.Log('$q error');
            }
        );

        // mandatory function call, clear current favorite data
        ////$scope.base.ClearCurrentFavorite();
    }

    $scope.GetData = function () {

        $ionicLoading.show({ noBackdrop: true });

        $q.all({
            A: $scope.GetDataTypeA().catch($scope.CatchException),
            B: $scope.GetDataTypeB().catch($scope.CatchException),
            C: $scope.GetDataTypeC().catch($scope.CatchException)
        })
        .then(
            function (results) {
                // hide loading image
                $ionicLoading.hide();

                $scope.result.ListA = results.A.salesdata;
                $scope.Sum($scope.result.ListAA, 'A');

                $scope.result.ListB = results.B.salesdata;
                $scope.Sum($scope.result.ListAB, 'B');

                $scope.result.ListC = results.C.salesdata;
                $scope.Sum($scope.result.ListAC, 'C');

                if ($scope.isReload == false)
                    $timeout(SetSwiper, 500);
            }
            , function (error) {

                // hide loading image
                $ionicLoading.hide();

                $scope.debug.Log('$q error');
            }
        );
    }

    $scope.Sum = function (list, type) {

        var goalAmount = 0;
        var amount = 0;
        var pastAmount = 0;
        var rate = 0.0;
        var growthRate = 0.0;

        if (list != null) {
            for (var i = 0; i < list.length; i++) {
                goalAmount += list[i].goalAmount;
                amount += list[i].amount;
                pastAmount += list[i].pastAmount;
            }
        }
        else {
            list = {};
        }

        rate = (amount / goalAmount).toFixed(1);
        growthRate = (amount / pastAmount).toFixed(1);

        list.sum = {};
        list.sum.goalAmount = goalAmount;
        list.sum.amount = amount;
        list.sum.pastAmount = pastAmount;
        list.sum.rate = isNaN(rate) ? 0 : rate;
        list.sum.growthRate = isNaN(growthRate) ? 0 : rate;

    }

    $scope.GetDataTypeA = function () {
        var defer = $q.defer();

        AccumulateSalesService.query(
            {
                gubun: $scope.search.isMonthly == true ? 1 : 1 + 4,
                plantCode: $scope.storePopup.selectedStore.plantCode == '-1' ? '' : $scope.storePopup.selectedStore.plantCode,
                yearMonth: '', // use server side value
                categoryUnit: $scope.cuPopup.selectedCu.cuCode == '-1' ? '' : $scope.cuPopup.selectedCu.cuCode,
                purchaseGroup: $scope.cuPopup.selectedPc.pcCode == '-1' ? '' : $scope.cuPopup.selectedPc.pcCode,
                brandCode: '',
                personNumber: $scope.user.loginId
            },
            function (data) {
                $scope.debug.Log('GetDataTypeA.query().success');
                defer.resolve(data);
            },
            function (error) {
                $scope.debug.Log(error);
                defer.reject(error);
            }
        );

        return defer.promise;
    }

    $scope.GetDataTypeB = function () {
        var defer = $q.defer();

        AccumulateSalesService.query(
            {
                gubun: $scope.search.isMonthly == true ? 2 : 2 + 4,
                plantCode: $scope.storePopup.selectedStore.plantCode == '-1' ? '' : $scope.storePopup.selectedStore.plantCode,
                yearMonth: '', // use server side value
                categoryUnit: $scope.cuPopup.selectedCu.cuCode == '-1' ? '' : $scope.cuPopup.selectedCu.cuCode,
                purchaseGroup: $scope.cuPopup.selectedPc.pcCode == '-1' ? '' : $scope.cuPopup.selectedPc.pcCode,
                brandCode: '',
                personNumber: $scope.user.loginId
            },
            function (data) {
                $scope.debug.Log('GetDataTypeB.query().success');
                defer.resolve(data);
            },
            function (error) {
                $scope.debug.Log(error);
                defer.reject(error);
            }
        );

        return defer.promise;
    }

    $scope.GetDataTypeC = function () {
        var defer = $q.defer();

        AccumulateSalesService.query(
            {
                gubun: $scope.search.isMonthly == true ? 3 : 3 + 4,
                plantCode: $scope.storePopup.selectedStore.plantCode == '-1' ? '' : $scope.storePopup.selectedStore.plantCode,
                yearMonth: '', // use server side value
                categoryUnit: $scope.cuPopup.selectedCu.cuCode == '-1' ? '' : $scope.cuPopup.selectedCu.cuCode,
                purchaseGroup: $scope.cuPopup.selectedPc.pcCode == '-1' ? '' : $scope.cuPopup.selectedPc.pcCode,
                brandCode: '',
                personNumber: $scope.user.loginId
            },
            function (data) {
                $scope.debug.Log('GetDataTypeC.query().success');
                defer.resolve(data);
            },
            function (error) {
                $scope.debug.Log(error);
                defer.reject(error);
            }
        );

        return defer.promise;
    }

    $scope.CatchException = function (error) {
        // optional hide loading image
        $ionicLoading.hide();
        $scope.debug.Log('CatchException');
    }

    $scope.SetSearchType = function () {
        var store = '0';
        var cu = '0';
        var pc = '0';

        if ($scope.storePopup.selectedStore.plantCode == '-1')
            store = '-1';

        if ($scope.cuPopup.selectedCu.cuCode == '-1')
            cu = '-1';

        if ($scope.cuPopup.selectedPc.pcCode == '-1')
            pc = '-1';

        var result = store + cu + pc;
        $scope.search.type = result;
    }

    $scope.OpenStorePopup = function () {
        var name = ($scope.storePopup.selectedStore == null) ? '' : $scope.storePopup.selectedStore.plantName;
        // new!!
        $scope.param = {};
        $scope.param.subTitle = name;

        var url = 'templates/storePopup.html';
        $ionicPopup.show({
            templateUrl: url,
            cssClass: 'storePopupNew', // new!!
            scope: $scope,
            buttons: [{
                text: '취소',
                onTap: function (e) {
                    return false;
                }
            }, {
                text: '확인',
                onTap: function (e) {
                    return true;
                }
            }]
        }).then(function (result) {

            if (result == true) {
                $scope.storePopup.selectedStore = angular.copy($scope.storePopup.selectedStoreTemp);

                $scope.SetSearchType();
                ////$scope.GetData();
            }
            else {
                $scope.storePopup.selectedStoreTemp = angular.copy($scope.storePopup.selectedStore);
            }

            $timeout(SetSwiper, 500);
        });
    }

    $scope.OpenCuPopup = function () {
        var name = ($scope.cuPopup.selectedCu == null) ? '' : $scope.cuPopup.selectedCu.cuName;
        name += ($scope.cuPopup.selectedPc == null) ? '' : " / " + $scope.cuPopup.selectedPc.pcName;

        // new!!
        $scope.param = {};
        $scope.param.subTitle = name;

        var url = 'templates/cuPopup.html';
        $ionicPopup.show({
            templateUrl: url,
            cssClass: 'cuPcPopupNew', // new!!
            scope: $scope,
            buttons: [{
                text: '취소',
                onTap: function (e) {
                    return false;
                }
            }, {
                text: '확인',
                onTap: function (e) {

                    if ($scope.cuPopup.selectedCuTemp != null
                        && $scope.cuPopup.selectedPcTemp != null) {
                        return true;
                    }
                    else
                        return false;
                }
            }]
        }).then(function (result) {

            if (result == true) {
                $scope.cuPopup.selectedCu = angular.copy($scope.cuPopup.selectedCuTemp);
                $scope.cuPopup.selectedPc = angular.copy($scope.cuPopup.selectedPcTemp);

                $scope.SetSearchType();
                ////$scope.GetData();
            }
            else {
                $scope.cuPopup.selectedCuTemp = angular.copy($scope.cuPopup.selectedCu);
                $scope.cuPopup.selectedPcTemp = angular.copy($scope.cuPopup.selectedPc);
            }

            $timeout(SetSwiper, 500); // $scope.base.swiper();

        });
    }

    $scope.Init();

    var SetSwiper = function () {
        //$scope.debug.Log('in  $scope.SetSwipe()');
        $scope.base.swiper();
    }
});
