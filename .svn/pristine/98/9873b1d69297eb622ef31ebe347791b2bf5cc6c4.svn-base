var getBarcodebySwipe = function (barcode) {
    var scope = angular.element($('#home')).scope();
    // alert(barcode);
    scope.$apply(function () {
        scope.GetBarCode(barcode);
    });
}

/**
 * Created by june on 15. 6. 11..
 */
cortrollerModule.controller('AppCtrl', ['$scope', '$ionicModal', '$timeout', 'CordovaService', '$state', '$translate', 'PopupService', 'FavoriteService', '$q', 'MenuApiService',

    function ($scope, $ionicModal, $timeout, CordovaService, $state, $translate, PopupService, FavoriteService, $q, MenuApiService) {

        //console.log('AppCtrl()');
        CordovaService.ready.then(function () {
            // Using MDMPlugin for MDM Check
        });
    
        // for child controller 
        $scope.base = {};
        $scope.base.menuId = '';
        $scope.base.viewId = '';
        ////$scope.base.stateId = '';
        ////$scope.base.snapshot = null;
        $scope.base.currentStateParams = null;

        $scope.base.barCode007 = null;


        $scope.word = {};

        // global setting 
        $scope.setting = {};
        $scope.setting.header = {};
        $scope.setting.footer = {};
        $scope.setting.header.prevClass = '';
        $scope.setting.homeMenuId = 'NRSMM00';

        // system
        $scope.system = {};
        $scope.system.appId = 'com.eland.ios.NRSM'; // com.eland.nrs
        $scope.system.currentMenuVersion = '0';
        $scope.system.locale = 'ko';

        // user
        $scope.user = {};
        $scope.user.loginId = 'ju_minho';

        $scope.debug = {};
        $scope.debug.logging = true;

        $scope.favorite = {};
        $scope.favorite.items = [];
        $scope.favorite.support = true;
        $scope.favorite.selected = null;    // selected favorite 
        $scope.favorite.collected = [];   // collect data with favorite directive in each view

        $scope.debug.Log = function (val) {
            if ($scope.debug.logging == true)
                console.log(val);
        }

        $scope.Init = function (translate) {
            $scope.debug.Log('AppCtrl.Init();');

            var headerFooterClass = 'bar-energized';
            $scope.setting.header.class = headerFooterClass;
            $scope.setting.footer.class = headerFooterClass;

            // set multi language
            translate.use($scope.system.locale).then(function () {
                $scope.GetWord(translate);
            });
        }
    
        $scope.GetWord = function (translate) {

            var result = [];
            var firstArray = $.map(words, function (val, idx) { return [val]; });
            var temp = null;
            temp = $.map(firstArray[0], function (val, idx) { return [idx]; });
            result = $.merge( result, temp)

            //
            $scope.wordParam = { name: 'tester' };

            translate(result).then(function (words) {
                $scope.word.common = words.common;
                $scope.word.manager = words.manager;
                $scope.word.title = words.title;
                $scope.word.task = words.task;
                $scope.word.hyper = words.hyper;
                $scope.word.productInfo = words.productInfo;
                $scope.word.productDetail= words.productDetail;
                $scope.word.msgTips = words.msgTips;
                $scope.word.normalPrice = words.normalPrice;
                $scope.word.activiting = words.activiting;
                $scope.word.terminalt = words.terminalt;
                $scope.word.eimsInformation = words.eimsInformation;
                $scope.word.realStockControl = words.realStockControl;
                $scope.word.saleProjections = words.saleProjections;
            });

            translate('testSentence', { name: 'tester' }).then(function (word) {
                $scope.word.testSentence = word;
            });
        }

        $scope.Init($translate);

        // called sub system main controller
        $scope.base.HasAuthentication = function () {

        }

        $scope.base.GetUserMenu = function () {
            var defer = $q.defer();

            MenuApiService.get({
                appId: $scope.system.appId,
                loginId: $scope.user.loginId,
                currentMenuVersion: $scope.system.currentMenuVersion,
                locale: $scope.system.locale
            }, function (data) {
                defer.resolve(data.data.sections);
            }, function (error) {
                defer.reject(error);
            });

            return defer.promise;
        }

        $scope.base.HasMenu = function (sections) {

            var defer = $q.defer();

            var hasMenu = false;
            var currentStateName = $state.$current.name;

            try{
                for (var i = 0; i < sections.length; i++) {
                    for (var j = 0; j < sections[i].menus.length; j++) {
                        if (sections[i].menus[j].url == currentStateName) {
                            hasMenu = true;
                            break;
                        }
                    }
                }
                //defer.resolve(false); // for test !!
                defer.resolve(hasMenu);
            }
            catch (err) {
                defer.reject(false);
            }

            return defer.promise;
        }

        $scope.base.SetCategory = function (categoryId) {
        
            $scope.base.categoryId = categoryId;

            var headerClass = $scope.setting.header.class;
            var footerClass = $scope.setting.footer.class;

            $scope.setting.header.prevClass = headerClass;////

            if (categoryId == 'home') {
                headerClass = 'bar-light';  //when back to home page,the header should be change
            }
            else if (categoryId == 'managerReport') {
                headerClass = 'bar-positive';
                footerClass = 'bar-positive';
            }
            else if (categoryId == 'sales') {
                headerClass = 'bar-calm';
                footerClass = 'bar-calm';
            }
            else if (categoryId == 'common') {
                headerClass = 'bar-eland-balanced';
                footerClass = 'bar-balanced';
            }
            else if (categoryId == 'hyper') {
                headerClass = 'bar-eland-balanced';
                footerClass = 'bar-energized';
            }
            else if (categoryId == 'sc') {
                headerClass = 'bar-assertive';
                footerClass = 'bar-assertive';
            }
            else {
                headerClass = "bar-energized";
                footerClass = "bar-energized";
            }

            $scope.setting.header.class = headerClass;
            $scope.setting.footer.class = 'bar-light';

            UpdateHeaderClass();
        }

        function UpdateHeaderClass() {
            var headerElements = document.getElementsByTagName('ion-header-bar');

            var headerOldClass = $scope.setting.header.prevClass;
            var headerNewClass = $scope.setting.header.class;

            for (var i = 0; i < headerElements.length; i++) {
                var el = angular.element(headerElements[i]);
                if (el.hasClass(headerOldClass)) {
                    el.removeClass(headerOldClass);
                    el.addClass(headerNewClass);
                }
            }

            $scope.setting.header.prevClass = headerNewClass;
        }

        $scope.base.SetMenu = function (menuId) {

            $scope.base.menuId = menuId;
        
            if (menuId == 'NRSM001') {
                $scope.debug.Log('AppCtrl.base.SetMenu()');
            } 
        }

        $scope.base.SaveSnapshot = function () {
        
        }

        $scope.base.Reload = function () {
            //$scope.debug.Log('AppCtrl.base.Reload()');

            $state.transitionTo($state.current, $scope.base.currentStateParams, {
                reload: true, inherite: false, notify: true
            });
        }
    
        // favorite click event handler in footer.html
        $scope.base.ClickStar = function () {
            $scope.debug.Log('AppCtrl.ClickStar()');

            PopupService.OpenPopupConfirm('Add Favorite', 'Are you sure to favorite this view?', $scope.base.AddFavorite, null)
        }

        $scope.base.AddFavorite = function () {
            
            $scope.newFavorite = new FavoriteService();
            $scope.newFavorite.ProgramCode = $scope.base.menuId;
            $scope.newFavorite.Url = $state.current.name;

            var key = 'Key';
            var value = 'Value';
            for (var i = 0; i < $scope.favorite.collected.length; i++) {
                $scope.newFavorite[key + parseInt(i + 1)] = $scope.favorite.collected[i].key;
                $scope.newFavorite[value + parseInt(i + 1)] = $scope.favorite.collected[i].value;
            }

            $scope.newFavorite.$save({
                    loginId: $scope.user.loginId
                },
                function (response) {                    
                    ////$scope.base.ClearCurrentFavorite();
                }
            );
        }

        $scope.base.ClickGear = function () {
            $scope.debug.Log('AppCtrl.ClickGear()');
        }

        $scope.base.ClickAdd = function () {
            $scope.debug.Log('AppCtrl.ClickAdd()');
        }

        $scope.GetBarCode = function(barcode) {

            var menu = $scope.base.menuId;

            if(menu == "NRSMM07") {
                $scope.base.barCode007 = parseInt(barcode);
            }
            //else if(menu == "NRSMM07") {
            //    $scope.base.barCode007 = parseInt(barcode);
            //}
        }

        $scope.base.GetFavoriteValue = function (key) {

            var temp = $scope.favorite.selected;
            var result = '';
            if (temp.key1 == key) {
                result = temp.value1;
            }
            else if (temp.key2 == key) {
                result = temp.value2;
            }
            else if (temp.key3 == key) {
                result = temp.value3;
            }
            else if (temp.key4 == key) {
                result = temp.value4;
            }
            else if (temp.key5 == key) {
                result = temp.value5;
            }

            return result;
        }

        $scope.base.ClearCurrentFavorite = function () {
            //$scope.favorite.selected = null;
            //$scope.favorite.collected = [];
        }

        $scope.base.GoView = function (state, selectedFavorite) {            
            if (selectedFavorite != null) {
                $scope.favorite.selected = selectedFavorite;
            }

            $state.go(state);
        }

        $scope.base.CollectFavorites = function (currentKey, currentValue) {
            var o = { key: currentKey, value: currentValue };

            if ($scope.favorite.collected.length == 0) {
                $scope.favorite.collected.push(o);
            }
            else {
                var isProcessing = false;
                for (var i = 0; i < $scope.favorite.collected.length; i++) {
                    if ($scope.favorite.collected[i].key == currentKey) {
                        $scope.favorite.collected[i].value = currentValue;
                        isProcessing = true;
                        break;
                    }
                }
                if (isProcessing == false) {
                    $scope.favorite.collected.push(o);
                }
            }
        }
    }])

    .directive('footer', function() {
        return {
            restrict: 'E',
            replace: true,
            templateUrl : 'templates/footer.html'   //update by liu.wenbin
        }
    })

    .directive('favorite', function ($parse) {
        return {
            restrict: 'A',
            link: function (scope, element, attributes) {
                scope.$watch(attributes.favorite, function (val) {
                    scope.base.CollectFavorites(attributes.favoriteKey, val);
                })
            }
        };
    })

    .directive('compile', ['$compile', function ($compile) {
        return function (scope, element, attrs) {
            scope.$watch(
              function (scope) {
                  return scope.$eval(attrs.compile);
              },
              function (value) {
                  element.html(value);
                  $compile(element.contents())(scope);
              }
           )
        };
    }])
    //.directive('header', function () {
    //    return {
    //        restrict: 'E',
    //        replace: true,
    //        templateUrl: '/templates/header.html'
    //    }
    //})

    //.directive('header', function () {
    //    return {
    //        restrict: 'E',
    //        replace: true,
    //        templateUrl: '/templates/header.html',
    //        //link: function (scope, element, attrs) {
    //        //    //temp = scope.setting.header.class;
    //        //    element.addClass(scope.setting.header.class);
    //        //}
    //        scope: {
    //            temp: '=csstype'
    //        }
    //    }
    //})