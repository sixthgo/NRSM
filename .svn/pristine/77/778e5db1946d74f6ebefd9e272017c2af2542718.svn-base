//
//  FFShellPlugin.m
//  FormularLib
//
//  Created by 인식 조 on 12. 11. 14..
//  Copyright (c) 2012년 장재휴. All rights reserved.
//

#import "FFShellPlugin.h"
#import "FFURLHelper.h"
#import "NSBundle+Extension.h"
#import "NTMonthYearPicker.h"

@interface FFShellPlugin () 

@property (nonatomic, strong) NSString *monthYearCallbackId;
@property (nonatomic, strong) NSString *yearMonth;

@end

@implementation FFShellPlugin

NTMonthYearPicker *picker;
UIPopoverController *popupCtrl;

#pragma mark
- (id)init
{
    if (self = [super init]) {
    }
    return self;
}

- (void) launch_app:(CDVInvokedUrlCommand*)command
{
    NSString* callbackId = command.callbackId;
    
    CDVPluginResult* pluginResult = nil;
    NSString* javaScript = nil;
    id params = nil;
    NSArray* arguments = command.arguments;
    
    NSError *error;
//    if(arguments.count > 0)
//        params = [NSJSONSerialization JSONObjectWithData:[[arguments objectAtIndex:0]dataUsingEncoding:NSUTF8StringEncoding]
//                                                 options:NSJSONReadingMutableLeaves
//                                                   error:&error];
    NSString *mdmUrl = @"mobilekeeper://";
    NSString *identifier = [[arguments objectAtIndex:0] valueForKey:@"packageName"];
    NSString *mobilekeeperUrlString = [NSString stringWithFormat:@"%@%@", mdmUrl, identifier];
    
//    [[UIApplication sharedApplication] openURL:[NSURL URLWithString:identifier]];
    
    if ([[UIApplication sharedApplication] canOpenURL:[NSURL URLWithString:mdmUrl]]) {
        [[UIApplication sharedApplication] openURL:[NSURL URLWithString:mobilekeeperUrlString]];
        
        pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_OK];
//        javaScript = [pluginResult toSuccessCallbackString:callbackId];
    }
    else {
        pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_ERROR messageAsString:@"This app is not installed"];
//        javaScript = [pluginResult toErrorCallbackString:callbackId];
    }
    
    [self.commandDelegate sendPluginResult:pluginResult callbackId:callbackId];
//    [self writeJavascript:javaScript];
}

- (void) yearMonthCalendar:(CDVInvokedUrlCommand*)command
{
    NSString* callbackId = command.callbackId;
    self.monthYearCallbackId = callbackId;
    
    CDVPluginResult* pluginResult = nil;
    NSString* javaScript = nil;
    id params = nil;
    NSArray* arguments = command.arguments;
    
    NSError *error;
    
    [self settingMonthYearPicker];
    
    CGSize pickerSize = [picker sizeThatFits:CGSizeZero];
    if( UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone ) {
        // iPhone: show picker at the bottom of the screen
        if( ![picker isDescendantOfView:self.viewController.view] ) {
            picker.frame = CGRectMake( 0, [[UIScreen mainScreen] bounds].size.height - pickerSize.height, pickerSize.width, pickerSize.height );
            [self.viewController.view addSubview:picker];
        }
    } else {
        // iPad: show picker in a popover
        if( !popupCtrl.isPopoverVisible ) {
            UIView *container = [[UIView alloc] init];
            [container addSubview:picker];
            
            UIViewController* popupVC = [[UIViewController alloc] init];
            popupVC.view = container;
            
            popupCtrl = [[UIPopoverController alloc] initWithContentViewController:popupVC];
            [popupCtrl setPopoverContentSize:picker.frame.size animated:NO];
            
            //            [popupCtrl presentPopoverFromRect:[pickerModeSelector bounds]
            //                                       inView:self.view
            //                     permittedArrowDirections:UIPopoverArrowDirectionAny
            //                                     animated:YES];
            
            popupCtrl.delegate = self;
            [popupCtrl presentPopoverFromRect:CGRectMake([[UIScreen mainScreen] bounds].size.width-100, 50, 50, 50)
                                       inView:self.viewController.view
                     permittedArrowDirections:UIPopoverArrowDirectionUp
                                     animated:YES];
        }
    }
    
    //    [self writeJavascript:javaScript];
}

- (void) getUserInfo:(CDVInvokedUrlCommand*)command
{
    NSString* callbackId = command.callbackId;
    
    CDVPluginResult* pluginResult = nil;
    NSString* javaScript = nil;
    id params = nil;
    NSString *requestUserInfo = [[NSString alloc]init];
    NSString *returnValue = [[NSString alloc]init];
    NSArray* arguments = command.arguments;
    
    NSError *error;
    params = [NSJSONSerialization JSONObjectWithData:[[arguments objectAtIndex:0]dataUsingEncoding:NSUTF8StringEncoding] options:NSJSONReadingMutableLeaves error:&error];
    requestUserInfo = [params valueForKey:@"requestUserInfo"];
    
    if([requestUserInfo isEqualToString:@"id"])
    {
        returnValue = [[NSUserDefaults standardUserDefaults]valueForKey:@"GBFW_USER_ID"];
    }
    else if([requestUserInfo isEqualToString:@"name"]){
        returnValue = [[NSUserDefaults standardUserDefaults]valueForKey:@"GBFW_USER_NAME"];
    }
    else if([requestUserInfo isEqualToString:@"email"]){
        returnValue = [[NSUserDefaults standardUserDefaults]valueForKey:@"GBFW_USER_EMAIL"];
    }
    else if([requestUserInfo isEqualToString:@"isManager"]){
        returnValue = [[NSUserDefaults standardUserDefaults]valueForKey:@"GBFW_USER_ISMANAGER"];
    }
    else if([requestUserInfo isEqualToString:@"loginId"]){
        returnValue = [[NSUserDefaults standardUserDefaults]valueForKey:@"GBFW_USER_LOGINID"];
    }
    
    pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_OK messageAsString:returnValue];
    javaScript = [pluginResult toSuccessCallbackString:callbackId];
    [self writeJavascript:javaScript];
}

- (void) settingMonthYearPicker{
    // Initialize the picker
    picker = [[NTMonthYearPicker alloc] init];
    [picker addTarget:self action:@selector(onDatePicked:) forControlEvents:UIControlEventValueChanged];
    
    
    NSDateComponents *comps = [[NSDateComponents alloc] init];
    NSCalendar *cal = [NSCalendar currentCalendar];
    
    // Set mode to month + year
    // This is optional; default is month + year
    picker.datePickerMode = NTMonthYearPickerModeMonthAndYear;
    
    // Set minimum date to January 2000
    // This is optional; default is no min date
    [comps setDay:1];
    [comps setMonth:1];
    [comps setYear:2000];
    picker.minimumDate = [cal dateFromComponents:comps];
    
    // Set maximum date to next month
    // This is optional; default is no max date
    [comps setDay:0];
    [comps setMonth:1];
    [comps setYear:0];
    picker.maximumDate = [cal dateByAddingComponents:comps toDate:[NSDate date] options:0];
    
    // Set initial date to last month
    // This is optional; default is current month/year
    [comps setDay:0];
    [comps setMonth:-1];
    [comps setYear:0];
    picker.date = [cal dateByAddingComponents:comps toDate:[NSDate date] options:0];
    
    // Initialize UI label and mode selector
//    [self updateModeSelector];
    picker.datePickerMode = 0;
    [self updateLabel];
}

- (void)onDatePicked:(UITapGestureRecognizer *)gestureRecognizer {
    [self updateLabel];
}

- (void)updateLabel {
    NSDateFormatter *df = [[NSDateFormatter alloc] init];
    
    if( picker.datePickerMode == NTMonthYearPickerModeMonthAndYear ) {
        [df setDateFormat:@"yyyyMM"];
    } else {
        [df setDateFormat:@"yyyy"];
    }
    
    self.yearMonth = [df stringFromDate:picker.date];
//    selectedDate.text = [NSString stringWithFormat:@"Selected: %@", dateStr];
}

- (void)popoverControllerDidDismissPopover:(UIPopoverController *)popoverController {
    // do something now that it's been dismissed
    CDVPluginResult* pluginResult = nil;
    
    [self updateLabel];
    pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_OK messageAsString:self.yearMonth];
    [self.commandDelegate sendPluginResult:pluginResult callbackId:self.monthYearCallbackId];
}


@end
