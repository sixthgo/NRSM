
controllerModule.controller('FloorPlanRecordCtrl', function ($scope, $stateParams, $q, $window, $ionicLoading, $sce, $ionicModal, $ionicScrollDelegate, PopupService, StoreFloorService, FloorplanHistoryService, FloorplanService, config) {

    $scope.base.categoryId = 'common';
    $scope.base.SetCategory($scope.base.categoryId);

    $scope.base.menuId = 'NRSM012'; // updated
    $scope.base.SetMenu($scope.base.menuId);
    
    $scope.favorite.support = true; // support favorite feature in this view
    $scope.favoriteKeyA = "KeyA";
    $scope.favoriteKeyB = "KeyB";

    $scope.windowSize = {};
    $scope.windowSize.width = $window.innerWidth;
    $scope.windowSize.height = $window.innerHeight;

    $scope.storeNfloors = [];

    $scope.data = {};
    $scope.data.werks = {};
    $scope.data.floor = {};
    $scope.data.selectedRequest = {};

    $scope.historyUrls = [];

    $scope.isDisable = false;
    $scope.toggled = false;

    $scope.dateSelected = [];
    $scope.changeHistory = [];
    $scope.selectCount = 0;

    $scope.compareModal = null;

    var isOrientation = false;

    $scope.style.showCalendarButton = 'none'; // default valus is 'none'
    $scope.style.showReloadButton = 'inline'; // default value is 'inline'

    $scope.Init = function () {

        $scope.toggled = false;
        $scope.data.selectedRequest = {};
        $ionicScrollDelegate.$getByHandle('floorPlanRecordHandle').scrollTop(true);

        $scope.SetLocalWord();
        $scope.debug.Log('FloorPlanRecordCtrl.Init();');

        var defer = $q.defer();

        defer.promise
                .then($scope.base.GetUserMenu)
                .then($scope.base.HasMenu)
                .then($scope.PostProcessing);

        defer.resolve();
        
    }

    $scope.SetLocalWord = function () {
        $scope.word.title = '도면이력 조회';
    }

    $scope.PostProcessing = function (isAuthenticate) {

        if (isAuthenticate == false) {
            PopupService.OpenPopupAlert('Warning', 'No have permission', $scope.GoHome);
            return;
        }

        $scope.styleHeight = $window.innerHeight;
        //console.log('$scope.styleHeight = ' + $scope.styleHeight);
        //
        $scope.InitData();
    }

    $scope.GoHome = function () {
        ////$ionicHistory.clearCache();
        $state.go('app.home');
    }

    $scope.InitData = function () {

        $scope.SetWindowSize();
        SetContentSize();
        $scope.GetSearchConditions();

        ////$(window).on('resize', function () {
        ////    SetContentSize()
        ////});
    }

    $scope.SetWindowSize = function () {
        $scope.windowSize.width = $window.innerWidth;
        $scope.windowSize.height = $window.innerHeight;
    }

    $scope.GetSearchConditions = function () {
        $ionicLoading.show({ noBackdrop: true });

        StoreFloorService.query({
            menu: '도면이력 조회',
            werks: '-',
            floor: '-',
            loginId: $scope.user.loginId
        }, function (data) {
            $ionicLoading.hide();
            $scope.storeNfloors = data;

            // if exists favorite key, set each value by key         
            if ($scope.favorite.support == true && $scope.favorite.selected != null)
                $scope.SetControlsByFavorite();

        }, function (error) {
            $ionicLoading.hide();
            console.log(error);
        });
    }

    $scope.SetControlsByFavorite = function () {
        var favoriteA = $scope.base.GetFavoriteValue($scope.favoriteKeyA); // 
        var favoriteB = $scope.base.GetFavoriteValue($scope.favoriteKeyB); // 
        
        for (var i = 0; i < $scope.storeNfloors.length; i++) {
            if (favoriteA == $scope.storeNfloors[i].sectionCode) {
                $scope.data.selectedRequest.storeNfloor = $scope.storeNfloors[i];
                break;
            }
        }

        for (var i = 0; i < $scope.data.selectedRequest.storeNfloor.floors.length; i++) {
            if (favoriteB == $scope.data.selectedRequest.storeNfloor.floors[i].code) {
                $scope.data.selectedRequest.floor = $scope.data.selectedRequest.storeNfloor.floors[i];
                break;
            }
        }

        $scope.GetHistoryData();
    }

    $scope.SelectStoreAction = function () {
        //console.log('SelectStoreAction()');
        if ($scope.data.selectedRequest.storeNfloor) {
            $scope.data.werks.sectionCode = $scope.data.selectedRequest.storeNfloor.sectionCode;
            $scope.data.werks.sectionName = $scope.data.selectedRequest.storeNfloor.sectionName;

            $scope.dateSelected = [];
            $scope.changeHistory = [];
            $scope.selectCount = 0;
        }
    }

    $scope.SelectFloorAction = function () {

        $scope.dateSelected = [];
        $scope.changeHistory = [];
        $scope.selectCount = 0;

        if ($scope.data.selectedRequest.floor) {
            $scope.data.floor.code = $scope.data.selectedRequest.floor.code;
            $scope.data.floor.name = $scope.data.selectedRequest.floor.name;

            $scope.GetHistoryData();
        }
    }

    $scope.GetHistoryData = function () {

        $ionicLoading.show({ noBackdrop: true });

        FloorplanHistoryService.query({
            werks: $scope.data.selectedRequest.storeNfloor.sectionCode,
            floor: $scope.data.selectedRequest.floor.code,
            fromDate: '',
            toDate: ''
        }, function (data) {
            $ionicLoading.hide();
            //$scope.data.werks = $scope.data.selectedRequest.storeNfloor.sectionCode;
            //$scope.data.floor = $scope.data.selectedRequest.floor.code;
            $scope.historyHtml = "";
            ////$scope.combineTextHtml = "";

            if (data.length > 0) {
                for (var i = 0; i < data.length; i++) {
                    $scope.changeHistory.push(parseInt(data[i].id));
                }
                //console.log("original length : " + $scope.changeHistory.length);
                //console.log(data);
                var year;
                
                for (var i = 0; i < data.length; i++) {
                    $scope + "." + data[i].name;
                    var appleClass = 'btn-fs';
                    if ($scope.isApple) {
                        appleClass = 'btn-is';
                    }

                    if (data[i].year != year) {
                        year = data[i].year;
                        $scope.historyHtml += "<h1 class='popup-page-header'>" + data[i].year + "</h1>";
                        $scope.historyHtml += "<button id='" + data[i].id + "' ng-click='dateSelect(" + data[i].id + ")' class='btn btn-default " + appleClass + "'ng-disabled='isDisable'>" + data[i].name + "</button>";
                    }
                    else {
                        $scope.historyHtml += "<button id='" + data[i].id + "' ng-click='dateSelect(" + data[i].id + ")' class='btn btn-default " + appleClass + "'ng-disabled='isDisable'>" + data[i].name + "</button>";
                    }
                }
            }
            else {
                $scope.historyHtml = "<div style='margin:8px'><font size='4'><b>검색된 이력이 없습니다.</b></font></div>";
            }

            $scope.combineTextHtml = $sce.trustAsHtml($scope.historyHtml);
            $scope.toggled = true;            
            //console.log($scope.combineTextHtml.toString());
        }, function (error) {
            $ionicLoading.hide();
            console.log(error);
        });

    }

    Array.prototype.remove = function () {
        var what, a = arguments, L = a.length, ax;
        while (L && this.length) {
            what = a[--L];
            while ((ax = this.indexOf(what)) !== -1) {
                this.splice(ax, 1);
            }
        }
        return this;
    };

    $scope.dateSelect = function (date) {
        var selected = document.getElementById(date);

        if (selected.classList.contains('btn-default')) {
            ++$scope.selectCount;

            selected.classList.remove('btn-default');
            selected.classList.add('btn-primary');

            $scope.dateSelected.push(date);
            $scope.changeHistory.remove(date);
            //console.log("Remove : " + $scope.changeHistory.length);

            if ($scope.selectCount > 1) {
                $scope.buttonsDisable('disabled');
            }
            //console.log($scope.dateSelected);
        }
        else if (selected.classList.contains('btn-primary')) {
            --$scope.selectCount;

            selected.classList.remove('btn-primary');
            selected.classList.add('btn-default');

            $scope.dateSelected.remove(date);
            $scope.changeHistory.push(date);
            //console.log("Add => " + $scope.changeHistory.length);

            if ($scope.selectCount <= 1) {
                $scope.buttonsDisable('abled');
            }
            //console.log($scope.dateSelected);
        }
    }

    $scope.buttonsDisable = function (state) {
        //console.log("length : " + $scope.changeHistory.length);
        for (var i = 0; i < $scope.changeHistory.length; i++) {
            if (state == 'disabled') {
                var button = document.getElementById($scope.changeHistory[i].toString());
                button.classList.add('disabled');
                button.setAttribute('disabled', 'disabled');
            }
            else {
                var button = document.getElementById($scope.changeHistory[i].toString());
                button.classList.remove('disabled');
                button.removeAttribute('disabled');
            }
        }
    }

    $scope.ShowSelectedDate = function () {
        if ($scope.data.selectedRequest.storeNfloor && $scope.data.selectedRequest.floor) {
            $scope.datas = [];
            if ($scope.dateSelected.length > 1) {
                for (var i = 0; i < $scope.dateSelected.length; i++) {
                    $scope.datas.push($scope.dateSelected[i].toString());
                }
                $scope.selectDate = $scope.datas.join('|');

                if ($scope.selectDate) {
                    $scope.openModal();
                } else {
                    PopupService.OpenPopupAlert("날짜를 선택해 주세요.");
                }
            } else {
                PopupService.OpenPopupAlert("비교 할 날짜를 선택해 주세요.");
            }
        } else {
            if (!$scope.data.selectedRequest.storeNfloor || $scope.data.selectedRequest.storeNfloor == undefined) {
                PopupService.OpenPopupAlert("지점을 선택 해 주세요.");
            } else {
                if (!$scope.data.selectedRequest.floor || $scope.data.selectedRequest.floor == undefined) {
                    PopupService.OpenPopupAlert("층을 선택 해 주세요.");
                }
            }
        }
    }
    
    $ionicModal.fromTemplateUrl('templates/common/floorPlanRecordDates.html', {
        scope: $scope,
        animation: 'slide-in-up'
    }).then(function (modal) {
        $scope.compareModal = modal;
    })

    $scope.openModal = function () {
        $scope.compareModal.show();

        $scope.InitModal();
    };

    $scope.closeModal = function () {
        $scope.compareModal.hide();
    };

    //Cleanup the modal when we're done with it!
    $scope.$on('$destroy', function () {
        $scope.compareModal.remove();
    });

    // Execute action on hide modal
    $scope.$on('compareModal.hidden', function () {
        // Execute action
    });

    // Execute action on remove modal
    $scope.$on('compareModal.removed', function () {
        // Execute action
    });

    $scope.InitModal = function () {


        var n = ($scope.selectDate.split("|").length - 1)
        if (n == 1) {
            $scope.navWidth = 200 + 'px';
        } else if (n == 2) {
            $scope.navWidth = 300 + 'px';
        } else {
            $scope.navWidth = 100 + 'px';
        }

        $scope.showDate =[];
        n = $scope.selectDate.indexOf("|");
        var splits = $scope.selectDate.split("|", n);

        for (var j = 0; j < splits.length; j++) {
            $scope.showDate.push(splits[j]);
        }

        $scope.dates = $scope.showDate;
        $scope.selected = $scope.dates[0];

        $scope.Guide();
        $scope.GetHistoryUrls();
    }
    
    $scope.Guide = function () {
        ////var guideHtml = "<ng-slide-push-menu position='bottom' button='push' button-text='범 례' button-style='padding:5px'>";
        var guideHtml = '';
        guideHtml += "<table cellpadding='0' cellspacing='0' border='0' width='100%'>";
        guideHtml += "<tr><td width='25%'></td><td align='right' valign='middle' width='10%'><svg width='25px' height='25px'><rect y='18%' width='18px' height='18px' style='fill:rgb(255,0,0);fill-opacity:0.5;storke:rgb(0,0,0);' /></svg></td><td align='right' widht='10%'>&nbsp;</td><td width='35%' align='left'><b>변경매장</b></td></tr>";
        guideHtml += "<tr><td width='25%'></td><td align='right' valign='middle' width='10%'><svg width='25px' height='25px'><rect y='18%' width='18px' height='18px' style='fill:rgb(255,247,224);storke:rgb(0,0,0);' /></svg></td><td align='right' widht='10%'>&nbsp;</td><td width='35%' align='left'><b>유지매장</b></td></tr>";
        guideHtml += "</table>";
        ////guideHtml += "</ng-slide-push-menu>";

        $scope.showGuide = guideHtml;
    }

    $scope.GetHistoryUrls = function () {

        $ionicLoading.show({ noBackdrop: true });

        FloorplanService.query({ // FloorPlanHistoryDetailService
            werks: $scope.data.selectedRequest.storeNfloor.sectionCode,
            floor: $scope.data.selectedRequest.floor.code,
            selectDates: $scope.selectDate,
            menu: "도면이력 조회",
            personNumber: $scope.user.loginId
        }, function (data) {
            $ionicLoading.hide();            
            //console.log(data);

            for (var i = 0; i < data.length; i++) {
                ////data[i].changeData = $sce.trustAsResourceUrl('http://web.nrsm.com' + '/' + data[i].changeData);
                data[i].changeData = $sce.trustAsResourceUrl(config.webServerUrl + '/' + data[i].changeData);
            }

            $scope.historyUrls = data;
            SetContentSize();
        }, function (error) {
            $ionicLoading.hide();
            console.log(error);
        })
    }

    function SetContentSize() {
        
        ////$('.swiper-content').css({
        ////    height: $window.innerHeight - $('.swiper-nav').height()
        ////});
        
        if (isOrientation) { // horizental
            
            localHeight = $scope.windowSize.height;
            localHeight = parseInt(localHeight) + 60;
            localWidth = $scope.windowSize.width;
            localWidth = parseInt(localWidth) - 120;
            $scope.totalWidth = localHeight * 3;
            $scope.pWidth = localHeight;
            var minusWidth = -localHeight;
            $scope.pHeight = parseInt(localWidth) - 20;
            $scope.trasitionSpeed = '0.3s';
            $scope.sa = 'translate3d(0px, 0px, 0px)';
            $scope.iFrameHeight = $scope.pHeight - 20;
        }
        else { // vertical
            localHeight = $scope.windowSize.height;
            localWidth = $scope.windowSize.width;
            $scope.totalWidth = localWidth * 3;
            $scope.pWidth = localWidth;
            var minusWidth = -localWidth;
            $scope.pHeight = parseInt(localHeight) - 120; // 20
            $scope.trasitionSpeed = '0.3s';
            $scope.sa = 'translate3d(0px, 0px, 0px)';
            $scope.iFrameHeight = $scope.pHeight - 20;
        }
    }

    ////var contentSwiper = new Swiper($('.swiper-content')[0], {
    ////    onSlideChangeStart: function () {
    ////        updateNavPosition()
    ////    }
    ////});
    var contentSwiper = new Swiper(document.querySelector('.swiper-content'), {
        onSlideChangeStart: function () {
            updateNavPosition()
        }
    });

    var orientationChangeEventHandler = function () {
        console.log('floorPlanRecordCtrl.orientationchange()');
        $scope.SetWindowSize();

        if (window.orientation == 90 || window.orientation == -90)
            isOrientation = true; // horizental
        else
            isOrientation = false; // vertical

        SetContentSize();
        $scope.$apply();

    };

    ionic.on('orientationchange', orientationChangeEventHandler, window);

    $scope.$on('$ionicView.beforeLeave', function () {
        console.log('$ionicView.beforeLeave()');
        ionic.off('orientationchange', orientationChangeEventHandler, window);
    });
    
    ////$(this).data('swiper', contentSwiper);
    angular.element(this).data('swiper', contentSwiper);

    ////var navSwiper = new Swiper($('.swiper-nav')[0], {
    ////    visibilityFullFit: true,
    ////    slidesPerView: 'auto',
    ////    onSlideClick: function () {
    ////        contentSwiper.swipeTo(navSwiper.clickedSlideIndex)
    ////    }
    ////})
    var navSwiper = new Swiper(document.querySelector('.swiper-nav'), {
        visibilityFullFit: true,
        slidesPerView: 'auto',
        onSlideClick: function () {
            contentSwiper.swipeTo(navSwiper.clickedSlideIndex)
        }
    })

    function updateNavPosition() {
        ////$('.swiper-nav .active-nav').removeClass('active-nav')
        document.querySelector('.swiper-nav .active-nav').removeClass('active-nav')
        ////var activeNav = $('.swiper-nav .swiper-slide').eq(contentSwiper.activeIndex).addClass('active-nav')
        var activeNav = document.querySelector('.swiper-nav .swiper-slide').eq(contentSwiper.activeIndex).addClass('active-nav')

        if (!activeNav.hasClass('swiper-slide-visible')) {
            if (activeNav.index() > navSwiper.activeIndex) {
                var thumbsPerNav = Math.floor(navSwiper.width / activeNav.width()) - 1
                navSwiper.swipeTo(activeNav.index() - thumbsPerNav)
            }
            else {
                navSwiper.swipeTo(activeNav.index())
            }
        }
    }

    $scope.selectMove = function (a) {
        var movePage;
        $scope.selected;
        if (a == $scope.dates[0]) {
            movePage = 0;
            $scope.selected = $scope.dates[0];
        } else if (a == $scope.dates[1]) {
            movePage = -$scope.pWidth;
            $scope.selected = $scope.dates[1];
        } else if (a == $scope.dates[2]) {
            movePage = -$scope.pWidth * 2;
            $scope.selected = $scope.dates[2];
        }
        $scope.sa = 'translate3d(' + movePage + 'px, 0px, 0px)';
    }

    $scope.Init();

    $scope.base.Reload = function () {
        $scope.debug.Log('FloorPlanRecordCtrl.base.Reload()');

        $scope.combineTextHtml = '';
        $scope.Init();
    }
});