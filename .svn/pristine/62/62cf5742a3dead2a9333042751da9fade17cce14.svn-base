controllerModule.controller('ProfitToPlanCtrl', function ($scope, $state, $stateParams, $q, $ionicLoading, $ionicHistory, $ionicPopup, $timeout, $ionicScrollDelegate, $ionicPosition, MenuApiService, FavoriteService, PopupService, PlantService, CUService, AccumulateSalesService, UtilService) {
    
    $scope.base.categoryId = 'sales';
    $scope.base.SetCategory($scope.base.categoryId);

    $scope.base.menuId = 'NRSM004'; // updated 
    $scope.base.SetMenu($scope.base.menuId);
    //$scope.base.stateId = $state.$current.name;

    $scope.favorite.support = true; // support favorite feature in this view
    $scope.favoriteKeyA = "PlantA";
    $scope.favoriteKeyB = "PCA";
    
    $scope.search = {};
    $scope.search.isMonthly = true;
    $scope.search.subType = 1; 
    $scope.search.type = '-1-1-1';

    $scope.searchCollection = {};

    //
    $scope.storePopup = {};
    $scope.storePopup.selectedStore = { plantCode: '-1', plantName: '전지점' };
    $scope.storePopup.selectedStoreTemp = null;

    $scope.cuPopup = {};
    $scope.cuPopup.selectedCu = { cuCode: '-1', cuName: '모든CU' };
    $scope.cuPopup.selectedCuTemp = null;
    $scope.cuPopup.selectedPc = { pcCode: '-1', pcName: '모든PC' };
    $scope.cuPopup.selectedPcTemp = null;
    
    $scope.data = {};
    $scope.result = {};

    $scope.sort = {};
    $scope.sort.column = 'name';
    $scope.sort.isDescending = false;

    $scope.requireScrollHeight = true;

    $scope.style.showCalendarButton = 'none'; // default valus is 'none'
    $scope.style.showReloadButton = 'inline'; // default value is 'inline'

    $scope.Init = function () {
        $scope.debug.Log('ProfitToPlanCtrl.Init()');
        
        ////$ionicScrollDelegate.$getByHandle('scrollA').scrollTop(true);
        //for (var i = 0; i < $ionicScrollDelegate.$getByHandle()._ionScroll.length; i++) {
        //    if ($ionicScrollDelegate.$getByHandle()._ionScroll[i].$$scrollName == 'scrollA') {
        //        $ionicScrollDelegate.$getByHandle()._ionScroll[i].scrollTop(true);
        //    }
        //}
        // set local word
        $scope.SetLocalWord();

        var yesterday = new Date();
        yesterday.setDate(yesterday.getDate() - 1);
        
        $scope.headerDate = UtilService.FormatDayDate(yesterday);

        var defer = $q.defer();

        defer.promise
                .then($scope.base.GetUserMenu)
                .then($scope.base.HasMenu)
                .then($scope.PostProcessing);

        defer.resolve();
    }

    $scope.PostProcessing = function (isAuthenticate) {

        if (isAuthenticate == false) {
            PopupService.OpenPopupAlert('Warning', 'No have permission', $scope.GoHome);
            return;
        }
        
        //
        $scope.InitData();

        //$scope.base.swiper();
    }

    $scope.GoHome = function () {
        ////$ionicHistory.clearCache();
        $state.go('app.home');
    }

    $scope.SetLocalWord = function () {
        $scope.word.title = '목표 전년 대비 실적';
    }

    $scope.InitData = function () {
        ////$scope.CollectSearchCondition(true);

        $scope.GetData();
    }
    
    $scope.sorting = function (sortColumn) {
        $scope.sort.isDescending = ($scope.sort.column == sortColumn) ? !$scope.sort.isDescending : false;
        $scope.sort.column = sortColumn;
    }

    $scope.SetControlsByFavorite = function () {
        
        // add code each view
        ////$scope.data.plantId = $scope.base.GetFavoriteValue($scope.favoriteKeyA); // PlantA
        ////$scope.data.PC = $scope.base.GetFavoriteValue($scope.favoriteKeyB); // PCA
        var favoriteA = $scope.base.GetFavoriteValue($scope.favoriteKeyA); // PlantA
        var favoriteB = $scope.base.GetFavoriteValue($scope.favoriteKeyB); // PCA

        PlantService.query({
            loginId: $scope.user.loginId
        }, function (data) {
            $ionicLoading.hide();
            //$scope.debug.Log('GetStore.get().success');
            $scope.data.stores = data;

            for (var i = 0; i < $scope.data.stores.length; i++) {
                if (favoriteA == $scope.data.stores[i].plantCode) {
                    $scope.storePopup.selectedStoreTemp = $scope.data.stores[i];
                    $scope.storePopup.selectedStore = angular.copy($scope.storePopup.selectedStoreTemp);
                    break;
                }
            }
            
        }, function (error) {
            $ionicLoading.hide();
            $scope.debug.Log(error);
        });

        CUService.query({
            loginId: $scope.user.loginId,
            type: 'cu',
            cuCode: ''
        }, function (data) {
            $ionicLoading.hide();
            //$scope.debug.Log('GetCu.get().success');
            $scope.data.cues = data;
            
            for (var i = 0; i < $scope.data.cues.length; i++) {
                if (favoriteB == $scope.data.cues[i].cuCode) {
                    $scope.cuPopup.selectedCuTemp = $scope.data.cues[i];
                    $scope.cuPopup.selectedCu = angular.copy($scope.cuPopup.selectedCuTemp);
                    ////$scope.OnCuChange();
                    return;
                }
            }

        }, function (error) {
            $ionicLoading.hide();
            $scope.debug.Log(error);

        });

        // mandatory function call, clear current favorite data
        $scope.base.ClearCurrentFavorite();
    }

    $scope.GetData = function () {

        $ionicLoading.show({ noBackdrop: true });

        $q.all({
            A: $scope.GetDataTypeA().catch($scope.CatchException),
            B: $scope.GetDataTypeB().catch($scope.CatchException),
            C: $scope.GetDataTypeC().catch($scope.CatchException),
            //D: $scope.GetDataTypeD().catch($scope.CatchException)
        })
        .then(
            function (results) {                
                // hide loading image
                $ionicLoading.hide();
                
                $scope.result.ListA = results.A.salesdata;
                $scope.Sum($scope.result.ListA, 'A');

                $scope.result.ListB = results.B.salesdata;
                $scope.Sum($scope.result.ListB, 'B');

                $scope.result.ListC = results.C.salesdata;
                $scope.Sum($scope.result.ListC, 'C');

                // if exists favorite key, set each value by key 
                //if ($scope.favorite.support == true && $scope.favorite.selected != null)
                //    $scope.SetControlsByFavorite();

                $timeout(SetSwiper, 500);
                
            }
            , function (error) {
                
                // hide loading image
                $ionicLoading.hide();

                $scope.debug.Log('$q error');
            }
        );
    }

    $scope.Sum = function (list, type) {

        var goalAmount = 0;
        var amount = 0;
        var pastAmount = 0;
        var rate = 0.0;
        var growthRate = 0.0;

        for (var i = 0; i < list.length; i++) {
            goalAmount += list[i].goalAmount;
            amount += list[i].amount;
            pastAmount += list[i].pastAmount;
        }

        rate = (amount / goalAmount).toFixed(1);
        growthRate = (amount / pastAmount).toFixed(1);
   
        list.sum = {};
        list.sum.goalAmount = goalAmount;
        list.sum.amount = amount;
        list.sum.pastAmount = pastAmount;
        list.sum.rate = isNaN(rate) ? 0 : rate;
        list.sum.growthRate = isNaN(growthRate) ? 0 : rate;
       
    }

    $scope.GetDataTypeA = function () {
        var defer = $q.defer();

        AccumulateSalesService.query(
            {
                gubun: $scope.search.isMonthly == true ? 1 : 1 + 4,
                plantCode: $scope.storePopup.selectedStore.plantCode == '-1' ? '' : $scope.storePopup.selectedStore.plantCode,
                yearMonth: '', // use server side value
                categoryUnit: $scope.cuPopup.selectedCu.cuCode == '-1' ? '' : $scope.cuPopup.selectedCu.cuCode,
                purchaseGroup: $scope.cuPopup.selectedPc.pcCode == '-1' ? '' : $scope.cuPopup.selectedPc.pcCode,
                brandCode: '',
                personNumber: $scope.user.loginId
            },
            function (data) {
                $scope.debug.Log('GetDataTypeA.query().success');                
                defer.resolve(data);
            },
            function (error) {
                $scope.debug.Log(error);
                defer.reject(error);
            }
        );

        return defer.promise;
    }

    $scope.GetDataTypeB = function () {
        var defer = $q.defer();

        AccumulateSalesService.query(
            {
                gubun: $scope.search.isMonthly == true ? 2 : 2 + 4,
                plantCode: $scope.storePopup.selectedStore.plantCode == '-1' ? '' : $scope.storePopup.selectedStore.plantCode,
                yearMonth: '', // use server side value
                categoryUnit: $scope.cuPopup.selectedCu.cuCode == '-1' ? '' : $scope.cuPopup.selectedCu.cuCode,
                purchaseGroup: $scope.cuPopup.selectedPc.pcCode == '-1' ? '' : $scope.cuPopup.selectedPc.pcCode,
                brandCode: '',
                personNumber: $scope.user.loginId
            },
            function (data) {
                $scope.debug.Log('GetDataTypeB.query().success');
                defer.resolve(data);
            },
            function (error) {
                $scope.debug.Log(error);
                defer.reject(error);
            }
        );

        return defer.promise;
    }

    $scope.GetDataTypeC = function () {
        var defer = $q.defer();

        AccumulateSalesService.query(
            {
                gubun: $scope.search.isMonthly == true ? 3 : 3 + 4,
                plantCode: $scope.storePopup.selectedStore.plantCode == '-1' ? '' : $scope.storePopup.selectedStore.plantCode,
                yearMonth: '', // use server side value
                categoryUnit: $scope.cuPopup.selectedCu.cuCode == '-1' ? '' : $scope.cuPopup.selectedCu.cuCode,
                purchaseGroup: $scope.cuPopup.selectedPc.pcCode == '-1' ? '' : $scope.cuPopup.selectedPc.pcCode,
                brandCode: '',
                personNumber: $scope.user.loginId
            },
            function (data) {
                $scope.debug.Log('GetDataTypeC.query().success');
                defer.resolve(data);
            },
            function (error) {
                $scope.debug.Log(error);
                defer.reject(error);
            }
        );

        return defer.promise;
    }

    $scope.GetDataTypeD = function () {
        var defer = $q.defer();
        
        AccumulateSalesService.query(
            {
                gubun: $scope.search.isMonthly == true ? 4 : 4 + 4,
                plantCode: $scope.storePopup.selectedStore.plantCode == '-1' ? '' : $scope.storePopup.selectedStore.plantCode,
                yearMonth: '', // use server side value
                categoryUnit: $scope.cuPopup.selectedCu.cuCode == '-1' ? '' : $scope.cuPopup.selectedCu.cuCode,
                purchaseGroup: $scope.cuPopup.selectedPc.pcCode == '-1' ? '' : $scope.cuPopup.selectedPc.pcCode,
                brandCode: '',
                personNumber: $scope.user.loginId
            },
            function (data) {
                $scope.debug.Log('GetDataTypeD.query().success');
                // 
                defer.resolve();
            },
            function (error) {
                $scope.debug.Log(error);
                defer.reject(error);
            }
        );

        return defer.promise;
    }

    $scope.CatchException = function (error) {
        // optional hide loading image
        $ionicLoading.hide();
        $scope.debug.Log('CatchException');
    }

    $scope.ToggleMonthly = function () {
        $scope.search.isMonthly = !$scope.search.isMonthly;

        ////$scope.CollectSearchCondition(false);
        $scope.GetData();
    }

    $scope.OpenStorePopup = function () {
        var name = ($scope.storePopup.selectedStore == null) ? '' : ' : ' + $scope.storePopup.selectedStore.plantName;

        var url = 'templates/storePopup.html';
        $ionicPopup.show({
            templateUrl: url,
            title: '지점 선택',
            subTitle: '현재 선택한 지점 ' + name,
            cssClass: 'storePopup',
            scope: $scope,
            buttons: [{
                text: 'Cancel',
                onTap: function (e) {
                    return false;
                }
            }, {
                text: 'OK',
                type: 'button-positive',
                onTap: function (e) {
                    return true;
                }
            }]
        }).then(function (result) {
            if (result == true) {                
                $scope.storePopup.selectedStore = angular.copy($scope.storePopup.selectedStoreTemp);

                ////$scope.CollectSearchCondition(false);
                $scope.GetData();
            }
            else {                
                $scope.storePopup.selectedStoreTemp = angular.copy($scope.storePopup.selectedStore);
            }

            $timeout(SetSwiper, 500);
        });
    }

    $scope.OpenCuPopup = function () {
        var name = ($scope.cuPopup.selectedCu == null) ? '' : ' : ' + $scope.cuPopup.selectedCu.cuName;
        name += ($scope.cuPopup.selectedPc == null) ? '' : $scope.cuPopup.selectedPc.pcName;

        var url = 'templates/cuPopup.html';
        $ionicPopup.show({
            templateUrl: url,
            title: 'CU/PC 선택',
            subTitle: '현재 선택한 CU/PC ' + name,
            cssClass: 'storePopup', // common use - storePopup, cuPopup
            scope: $scope,
            buttons: [{
                text: 'Cancel',
                onTap: function (e) {
                    return false;
                }
            }, {
                text: 'OK',
                type: 'button-positive',
                onTap: function (e) {
                    
                    if ($scope.cuPopup.selectedCuTemp != null
                        && $scope.cuPopup.selectedPcTemp != null) {
                        return true;
                    }
                    else
                        return false;
                }
            }]
        }).then(function (result) {
            if (result == true) {
                $scope.cuPopup.selectedCu = angular.copy($scope.cuPopup.selectedCuTemp);
                $scope.cuPopup.selectedPc = angular.copy($scope.cuPopup.selectedPcTemp);

                ////$scope.CollectSearchCondition(false);
                $scope.GetData();
            }
            else {
                $scope.cuPopup.selectedCuTemp = angular.copy($scope.cuPopup.selectedCu);
                $scope.cuPopup.selectedPcTemp = angular.copy($scope.cuPopup.selectedPc);
            }

            $timeout(SetSwiper, 500);
        });
    }
    
    $scope.ClickSubType = function (val) {
        $scope.search.subType = val;
    }

    var SetSwiper = function () {
        $scope.base.swiper();
        //$ionicScrollDelegate.$getByHandle('profitToPlanHandle').resize();
        
        if ($scope.requireScrollHeight == true) {
            var obj = angular.element('#scrollA');
            var position = $ionicPosition.position(obj);
            $scope.newHeightA = position.height - position.top;

            obj = angular.element('#scrollB');
            position = $ionicPosition.position(obj);
            $scope.newHeightB = position.height - position.top;

            obj = angular.element('#scrollC');
            position = $ionicPosition.position(obj);
            $scope.newHeightC = position.height - position.top;

            $scope.requireScrollHeight = false;
        }

        //
        //debugger
        ////$ionicScrollDelegate.$getByHandle('profitToPlanHandleA').scrollTop(false);
    }

    $scope.Init();

    $scope.base.Reload = function () {
        $scope.debug.Log('ProfitToPlanCtrl.base.Reload()');

        $scope.Init();
    }
});